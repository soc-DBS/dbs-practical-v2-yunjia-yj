//from practical orm 2
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model course {
  crseCode String @id @map("crse_code") @db.VarChar(5)

  crseName String @map("crse_name") @db.VarChar(100)

  offeredBy String @map("offered_by") @db.VarChar(5)

  crseFee Decimal @map("crse_fee") @db.Decimal(7, 2)

  labFee Decimal? @map("lab_fee") @db.Decimal(7, 2)
  students Student[]
  department department @relation(fields: [offeredBy], references: [deptCode],onDelete: NoAction, onUpdate: NoAction, map: "fk_course_offered_by")
}

model department {
  deptCode String @id @map("dept_code") @db.VarChar(5)

  deptName String @map("dept_name") @db.VarChar(100)

  hod String @db.Char(4)

  noOfStaff Int? @map("no_of_staff")

  maxStaffStrength Int? @map("max_staff_strength")

  budget Decimal? @db.Decimal(9, 2)

  expenditure Decimal? @db.Decimal(9, 2)

  hodApptDate DateTime? @map("hod_appt_date") @db.Date

  departmentHodToStaff staff @relation("departmentHodToStaff", fields:[hod], references: [staffNo], onDelete: NoAction, onUpdate: NoAction, map:"dept_hod_fk")

courses course[]
staffDeptCodeToDepartment staff[] @relation("staffDeptCodeToDepartment")
}

model staff {
  staffNo String @id @map("staff_no") @db.Char(4)
  staffName String @map("staff_name") @db.VarChar(100)
  supervisorStaffNo String? @map("supervisor_staff_no") @db.Char(4)
  dob DateTime @db.Date
  grade String @db.VarChar(5)
  maritalStatus String @map("marital_status") @db.VarChar(1)
  pay Decimal? @db.Decimal(7, 2)
  allowance Decimal? @db.Decimal(7, 2)
  hourlyRate Decimal? @map("hourly_rate") @db.Decimal(7, 2)
  gender String @db.Char(1)
  citizenship String @db.VarChar(10)
  joinYr Int @map("join_yr")
  deptCode String @map("dept_code") @db.VarChar(5)
  typeOfEmployment String @map("type_of_employment") @db.VarChar(2)
  highestQln String @map("highest_qln") @db.VarChar(10)
  designation String @db.VarChar(20)
departmentHodTostaff department[] @relation("departmentHodToStaff")
modulesCoordinated module[] @relation("mod_mod_coord_fk")
staffDeptCodeToDepartment department @relation("staffDeptCodeToDepartment", fields: [deptCode], references: [deptCode], onDelete: NoAction, onUpdate: NoAction,map: "staff_dept_code_fk")

  staffDependent StaffDependent[]
}

model staffBackup {
  staffNo String @id @map("staff_no") @db.Char(4)

  staffName String @map("staff_name") @db.VarChar(100)

  supervisor String? @db.Char(4)

  dob DateTime @db.Date

  grade String @db.VarChar(5)

  maritalStatus String @map("marital_status") @db.VarChar(1)

  pay Decimal? @db.Decimal(7, 2)

  allowance Decimal? @db.Decimal(7, 2)

  hourlyRate Decimal? @map("hourly_rate") @db.Decimal(7, 2)

  gender String @db.Char(1)

  citizenship String @db.VarChar(10)

  joinYr Int @map("join_yr")

  deptCode String @map("dept_code") @db.VarChar(5)

  typeOfEmployment String @map("type_of_employment") @db.VarChar(2)

  highestQln String @map("highest_qln") @db.VarChar(10)

  designation String @db.VarChar(20)

  @@map("staff_backup")
}

model userAccount {
  id Int @id

  accountNo String @map("account_no") @db.VarChar(6)

  role Int

  password String @db.VarChar(255)

  @@map("user_account")
}

model userRole {
  id Int @id

  name String @db.VarChar(25)

  @@map("user_role")
}

model module {
modCode String @id @map("mod_code") @db.VarChar(10)
modName String @map("mod_name") @db.VarChar(100)
creditUnit Int @map("credit_unit")
modCoord String? @map("mod_coord") @db.Char(4) 

 // relation to staff (foreign key)
  coordinator staff? @relation(name: "mod_mod_coord_fk",fields: [modCoord], references: [staffNo], onDelete: NoAction, onUpdate: NoAction, map: "mod_mod_coord_fk")
  performances StudModPerformance[] 
  // relationships to prerequisites (2 directions)
  modulesThatRequireThis PreRequisite[] @relation("preRequisiteRequisiteToModule")
  prerequisitesForModule PreRequisite[] @relation("preRequisiteModCodeToModule")

}

// model StaffDependent {
//   staffNo        String @map("staff_no") @db.Char(4)
//   dependentName  String @map("dependent_name") @db.VarChar(30)
//   relationship   String @db.VarChar(20)
//   @@id([staffNo, dependentName])
//   @@map("staff_dependent") 
// }

model StaffDependent {
  staffNo        String @map("staff_no") @db.Char(4)
  dependentName  String @map("dependent_name") @db.VarChar(30)
  relationship   String @db.VarChar(20)

   staff staff @relation(fields: [staffNo], references: [staffNo], onDelete: NoAction, onUpdate: NoAction, map: "staff_dependent_staff_no_fk") 

   @@id([staffNo, dependentName]) 
   @@map("staff_dependent")
}


model PreRequisite {
  modCode   String @db.VarChar(10)
  requisite String @db.VarChar(10)
  // relation to the module that has this pre-requisite
  module   module @relation(fields: [modCode],references: [modCode],onDelete: NoAction,onUpdate: NoAction,map: "pre_requisite_mod_code_fk",name: "preRequisiteModCodeToModule")

  // relation to the module that *is* the pre-requisite
  prerequisite module @relation(fields: [requisite],references: [modCode],onDelete: NoAction,onUpdate: NoAction,map: "pre_requisite_requisite_fk",name: "preRequisiteRequisiteToModule")
  @@id([modCode, requisite])
  @@map("pre_requisite")
}

model Country {
  countryName String @id @db.VarChar(30)
  language    String @db.VarChar(30)
  region      String @db.VarChar(30)
  students    Student[]
  @@map("country")
}

model Student {
  adminNo      String   @id @db.Char(4)
  studName     String   @db.VarChar(30)
  gender       String   @db.Char(1)
  address      String   @db.Char(100)
  mobilePhone  String   @db.Char(8)
  homePhone    String   @db.Char(8)
  dob          DateTime @db.Date
  nationality  String   @db.VarChar(30)
  crseCode     String   @db.Char(5)
  course      course   @relation(fields: [crseCode], references: [crseCode], onDelete: NoAction, onUpdate: NoAction)
  country     Country  @relation(fields: [nationality], references: [countryName], onDelete: NoAction, onUpdate: NoAction)
  performances StudModPerformance[]
  @@map("student")
}

model StudModPerformance {
  admNo         String @db.Char(4)
  modRegistered String @db.VarChar(10)
  mark          Int
  grade         String @db.Char(2)
  student      Student  @relation(fields: [admNo], references: [adminNo], onDelete: NoAction, onUpdate: NoAction)
  module       module   @relation(fields: [modRegistered], references: [modCode], onDelete: NoAction, onUpdate: NoAction)
  @@id([admNo, modRegistered])
  @@map("stud_mod_performance")
}